/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package flores.app;

import flores.Beans.ComposicionBean;
import flores.Beans.EncargoBean;
import flores.Beans.FlorBean;
import flores.gestores.GestionComposicionesBD;
import flores.gestores.GestionEncargosBD;
import flores.gestores.GestionFloresBD;
import flores.utils.FechasUtils;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vPalomo
 */
public class FloresMain extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public FloresMain() {
        initComponents();
        ponerListenerTablaComposiciones();
        ponerListenerTablaNuevaComposicion();
        ponerListenerTablaFlorAlmacen();
        ponerListenerTablaEncargos();
        cargarTablaFloresAlmacen();
        
        
//        Utils.ocultaFilaN(jTableFamilias, 2);
//        DefaultTableModel datosTabla = (DefaultTableModel) jTableFamilias.getModel();
//        datosTabla.addRow(new Object[]{
//            "Rosa tallo",
//            "80",
//            "1"
//        });
//        System.out.println(jTableFamilias.getValueAt(0, 2));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFloresAlmacen = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableComposiones = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableFloresDisponiblesCompo = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableComposicionNueva = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldNombreComposici√≥n = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableEncargos = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableFloresEncargo = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabelTotalEncargos = new javax.swing.JLabel();
        jPanelBotonesEstados = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 768));

        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        jTableFloresAlmacen.setAutoCreateRowSorter(true);
        jTableFloresAlmacen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdFlor", "Familia", "Nombre", "Color", "Cant. Almacen", "Cant. Encargos", "Cant. Disponible"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableFloresAlmacen);
        if (jTableFloresAlmacen.getColumnModel().getColumnCount() > 0) {
            jTableFloresAlmacen.getColumnModel().getColumn(0).setResizable(false);
            jTableFloresAlmacen.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTableFloresAlmacen.getColumnModel().getColumn(4).setResizable(false);
            jTableFloresAlmacen.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTableFloresAlmacen.getColumnModel().getColumn(5).setResizable(false);
            jTableFloresAlmacen.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTableFloresAlmacen.getColumnModel().getColumn(6).setResizable(false);
            jTableFloresAlmacen.getColumnModel().getColumn(6).setPreferredWidth(40);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Almacen", jPanel1);

        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentShown(evt);
            }
        });

        jTableComposiones.setAutoCreateRowSorter(true);
        jTableComposiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Fecha Alta", "Observacinoes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableComposiones.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTableComposiones);
        if (jTableComposiones.getColumnModel().getColumnCount() > 0) {
            jTableComposiones.getColumnModel().getColumn(0).setMinWidth(20);
            jTableComposiones.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTableComposiones.getColumnModel().getColumn(0).setMaxWidth(20);
        }

        jTableFloresDisponiblesCompo.setAutoCreateRowSorter(true);
        jTableFloresDisponiblesCompo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Familia", "Nombre", "Color", "Almacen", "Disponible"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableFloresDisponiblesCompo);
        if (jTableFloresDisponiblesCompo.getColumnModel().getColumnCount() > 0) {
            jTableFloresDisponiblesCompo.getColumnModel().getColumn(0).setPreferredWidth(25);
        }

        jTableComposicionNueva.setAutoCreateRowSorter(true);
        jTableComposicionNueva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Familia", "Nombre", "Color", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTableComposicionNueva);
        if (jTableComposicionNueva.getColumnModel().getColumnCount() > 0) {
            jTableComposicionNueva.getColumnModel().getColumn(0).setMinWidth(25);
            jTableComposicionNueva.getColumnModel().getColumn(0).setPreferredWidth(25);
            jTableComposicionNueva.getColumnModel().getColumn(0).setMaxWidth(25);
        }

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Contenido de la composici√≥n");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Composiciones definidas");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Flores disponibles");

        jLabel4.setText("Nombre composici√≥n:");

        jButton1.setText("<html>Encargar<br>con cliente</html>");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<html>Encargar<br><b>sin</b> cliente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextFieldNombreComposici√≥n, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldNombreComposici√≥n, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ramos", jPanel2);

        jPanel3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel3ComponentShown(evt);
            }
        });

        jTableEncargos.setAutoCreateRowSorter(true);
        jTableEncargos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nombre comp", "Cliente", "Fecha de entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableEncargos);
        if (jTableEncargos.getColumnModel().getColumnCount() > 0) {
            jTableEncargos.getColumnModel().getColumn(0).setMinWidth(20);
            jTableEncargos.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTableEncargos.getColumnModel().getColumn(0).setMaxWidth(20);
        }

        jTableFloresEncargo.setAutoCreateRowSorter(true);
        jTableFloresEncargo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Familia", "Nombre", "Color", "cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableFloresEncargo);
        if (jTableFloresEncargo.getColumnModel().getColumnCount() > 0) {
            jTableFloresEncargo.getColumnModel().getColumn(0).setResizable(false);
            jTableFloresEncargo.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jComboBox1.setModel(GestionEncargosBD.getModeloComboEstados());
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Estado del encargo:");

        jLabelTotalEncargos.setText("Total: ");

        jPanelBotonesEstados.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelBotonesEstados.setLayout(new java.awt.GridLayout());

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(40, 40, 40)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelTotalEncargos)
                    .addComponent(jPanelBotonesEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(95, 95, 95))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTotalEncargos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBotonesEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Encargos", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 994, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel2ComponentShown
        //Pesta√±a ramos
        cargarTablaComposiciones();
        cargarTablaFloresDisponiblesCompo();
        
    }//GEN-LAST:event_jPanel2ComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JDialog frame = new JDialog(this, "Encargos - Elegir cliente", true);
        frame.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        ListaClientes ventana=new ListaClientes();
        frame.getContentPane().add(ventana);
        frame.pack();
        frame.setLocationRelativeTo(this);
        frame.setVisible(true);
        String idClienteSel=ventana.getIdClienteSel();
//iniciarMisComponentes();
        frame.setVisible(false);
        if(ventana.getOpcion().equals(ListaClientes.ASIGNAR)){
            JDialog frameFecha = new JDialog(this, "fecha", true);
            frameFecha.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
            FechaEntrega ventanaF=new FechaEntrega();
            frameFecha.getContentPane().add(ventanaF);
            frameFecha.pack();
            frameFecha.setLocationRelativeTo(this);
            frameFecha.setVisible(true);
            //iniciarMisComponentes();
            frameFecha.setVisible(false);
            System.out.println("Fecha: "+ventanaF.getFechaSelString());
            if(ventanaF.getOpcion().equals(FechaEntrega.ACEPTAR)){
                guardarEncargo(jTextFieldNombreComposici√≥n.getText(),ventanaF.getFechaSelString(), idClienteSel);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        //Pesta√±a inicial
        //jTableFloresAlmacen.getColumnModel().getColumn(0).setCellRenderer(jTableFloresAlmacen.getTableHeader().getDefaultRenderer());
        cargarTablaFloresAlmacen();
    }//GEN-LAST:event_jPanel1ComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //boton de encargo sin cliente
        //String fecha=JOptionPane.showInputDialog(this, "Fecha de entrega",FechasUtils.fechaActualString());
        JDialog frame = new JDialog(this, "fecha", true);
        frame.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        FechaEntrega ventanaF=new FechaEntrega();
        frame.getContentPane().add(ventanaF);
        frame.pack();
        frame.setLocationRelativeTo(this);
        frame.setVisible(true);
        //iniciarMisComponentes();
        frame.setVisible(false);
        System.out.println("Fecha: "+ventanaF.getFechaSelString());
        if(ventanaF.getOpcion().equals(FechaEntrega.ACEPTAR)){
            guardarEncargo(jTextFieldNombreComposici√≥n.getText(),ventanaF.getFechaSelString());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPanel3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel3ComponentShown
        cargarListaEncargos();
        botonesEstados();
        //vaciarTable(jTableFloresEncargo);
        
        
    }//GEN-LAST:event_jPanel3ComponentShown

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //Cambiar opciones del combo de estado.
        cargarListaEncargos();
        cambiarBotonEstados();
        //vaciarTable(jTableFloresEncargo);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FloresMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FloresMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FloresMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FloresMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FloresMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelTotalEncargos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBotonesEstados;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableComposicionNueva;
    private javax.swing.JTable jTableComposiones;
    private javax.swing.JTable jTableEncargos;
    private javax.swing.JTable jTableFloresAlmacen;
    private javax.swing.JTable jTableFloresDisponiblesCompo;
    private javax.swing.JTable jTableFloresEncargo;
    private javax.swing.JTextField jTextFieldNombreComposici√≥n;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaComposiciones() {
        ArrayList<ComposicionBean> lista = GestionComposicionesBD.getListaComposiciones();
        DefaultTableModel datosTabla = (DefaultTableModel) jTableComposiones.getModel();
        for (int i = datosTabla.getRowCount(); i > 0; i--) {
            datosTabla.removeRow(i - 1);
        }
        for (ComposicionBean compo : lista) {
            datosTabla.addRow(new Object[]{
                compo.getIdComposicion(),
                compo.getNombre(),
                compo.getFechaAlta(),
                compo.getObservaciones()
            });
        }
    }
    
    private void cargarTablaFloresDisponiblesCompo() {
        //ArrayList<FlorBean> lista = GestionFloresBD.getListaFloresAlmacen();
        ArrayList<FlorBean> lista = GestionFloresBD.getListaFloresGeneral();
        DefaultTableModel datosTabla = (DefaultTableModel) jTableFloresDisponiblesCompo.getModel();
        for (int i = datosTabla.getRowCount(); i > 0; i--) {
            datosTabla.removeRow(i - 1);
        }
        for (FlorBean flor : lista) {
            datosTabla.addRow(new Object[]{
                flor.getIdFlor(),
                flor.getNombreFamilia(),
                flor.getNombre(),
                flor.getColor(),
                flor.getCantidadAlmacen(),
                (flor.getCantidadAlmacen()-flor.getCantidad())
            });
        }
    }

    private void ponerListenerTablaComposiciones() {
        jTableComposiones.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    cargarTablaFloresDisponiblesCompo();
                    System.out.println("Se ha hecho doble click - cargamos las flores del ramo");
                    jTextFieldNombreComposici√≥n.setText((String) jTableComposiones.getValueAt(jTableComposiones.getSelectedRow(),1));
                    String idCompo = (String) jTableComposiones.getValueAt(jTableComposiones.getSelectedRow(), 0);
                    ArrayList<FlorBean> lista = GestionComposicionesBD.getListaFloresCompo(idCompo);
                    descontarFloresTablaFloresDisponibles(lista);
                    DefaultTableModel datosTabla = (DefaultTableModel) jTableComposicionNueva.getModel();
                    for (int i = datosTabla.getRowCount(); i > 0; i--) {
                        datosTabla.removeRow(i - 1);
                    }
                    for (FlorBean flor : lista) {
                        datosTabla.addRow(new Object[]{
                            flor.getIdFlor(),
                            flor.getIdFamilia(),
                            flor.getNombre(),
                            flor.getColor(),
                            flor.getCantidad()
                        });
                    }
                }
            }
        });
    }
    private void descontarFloresTablaFloresDisponibles(ArrayList<FlorBean> lista){
        System.out.println("Descontar flores");
        for(FlorBean flor: lista){
            for (int j = jTableFloresDisponiblesCompo.getRowCount()-1; j >= 0; j--) {
                String idFlor = (String) jTableFloresDisponiblesCompo.getValueAt(j, 0);
                if(idFlor.equals(flor.getIdFlor())){
                    System.out.println("cant original: "+jTableFloresDisponiblesCompo.getValueAt(j, 5));
                    System.out.println("cant compo: "+flor.getCantidad());
                    
                    int cant=(int) jTableFloresDisponiblesCompo.getValueAt(j, 5);
                    System.out.println("cant resta: "+(cant-flor.getCantidad()));
                    jTableFloresDisponiblesCompo.setValueAt((cant-flor.getCantidad()), j, 5 );
                }
            }
        }
    }
    
    private void ponerListenerTablaEncargos() {
        jTableEncargos.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                //if (e.getClickCount() == 2) {
                    System.out.println("Se ha hecho doble click - cargamos las flores del encargo");
                    //jTextFieldNombreComposici√≥n.setText((String) jTableComposiones.getValueAt(jTableComposiones.getSelectedRow(),1));
                    String idEncargo = (String) jTableEncargos.getValueAt(jTableEncargos.getSelectedRow(), 0);
                    ArrayList<FlorBean> lista = GestionEncargosBD.getListaFloresEncargo(idEncargo);
                    DefaultTableModel datosTabla = (DefaultTableModel) jTableFloresEncargo.getModel();
                    for (int i = datosTabla.getRowCount(); i > 0; i--) {
                        datosTabla.removeRow(i - 1);
                    }
                    for (FlorBean flor : lista) {
                        datosTabla.addRow(new Object[]{
                            flor.getIdFlor(),
                            flor.getIdFamilia(),
                            flor.getNombre(),
                            flor.getColor(),
                            flor.getCantidad()
                        });
                    }
                    
                    
                //}
            }
        });
    }

    private void ponerListenerTablaNuevaComposicion() {
        jTableComposicionNueva.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    System.out.println("Se ha hecho doble click - quitamos una flor");
                    String idFlor = (String) jTableComposicionNueva.getValueAt(jTableComposicionNueva.getSelectedRow(), 0);
                    int cantidad = (Integer) jTableComposicionNueva.getValueAt(jTableComposicionNueva.getSelectedRow(), 4);
                    //cantidad--;
                    if(cantidad==1){
                        ((DefaultTableModel)jTableComposicionNueva.getModel()).removeRow(jTableComposicionNueva.getSelectedRow());
                        //jTableComposicionNueva.removeRowSelectionInterval(jTableComposicionNueva.getSelectedRow(), jTableComposicionNueva.getSelectedRow());
                    }else{
                        jTableComposicionNueva.setValueAt(--cantidad, jTableComposicionNueva.getSelectedRow(), 4);
                    }

                }
            }
        });
    }

    private void ponerListenerTablaFlorAlmacen() {
        jTableFloresDisponiblesCompo.addMouseListener(new MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    
                    String idFlor = (String) jTableFloresDisponiblesCompo.getValueAt(jTableFloresDisponiblesCompo.getSelectedRow(), 0);
                    System.out.println("Se ha hecho doble click - a√±adimos una flor: "+idFlor);
                    //restamos una flor en la tabla
                    int cantidadD = (int) jTableFloresDisponiblesCompo.getValueAt(jTableFloresDisponiblesCompo.getSelectedRow(), 5);
                    jTableFloresDisponiblesCompo.setValueAt(--cantidadD, jTableFloresDisponiblesCompo.getSelectedRow(), 5);
                    
                    boolean existe=false;
                    for (int i=0;i< jTableComposicionNueva.getRowCount();i++){
                        String idTabla=(String) jTableComposicionNueva.getValueAt(i, 0);
                        if(idFlor.equals(idTabla)){
                            System.out.println("Sumando 1 flor. Fila "+i);
                            System.out.println(jTableComposicionNueva.getValueAt(i, 4));
                            existe=true;
                            int cantidad = (Integer)jTableComposicionNueva.getValueAt(i, 4);
                            jTableComposicionNueva.setValueAt(++cantidad, i, 4);
                        }
                    }
                    if(!existe){
                        System.out.println("A√±adiendo flor");    
                        String nFamilia = (String) jTableFloresDisponiblesCompo.getValueAt(jTableFloresDisponiblesCompo.getSelectedRow(), 1);
                        String nombre = (String) jTableFloresDisponiblesCompo.getValueAt(jTableFloresDisponiblesCompo.getSelectedRow(), 2);
                        String color = (String) jTableFloresDisponiblesCompo.getValueAt(jTableFloresDisponiblesCompo.getSelectedRow(), 3);
                        ((DefaultTableModel)jTableComposicionNueva.getModel()).addRow(new Object[]{
                            idFlor,
                            nFamilia,
                            nombre,
                            color,
                            1}
                        );
                    }
                    
                }
            }
        });
    }

    private void guardarEncargo(String nombre, String fechaEntrega) {
        guardarEncargo(nombre, fechaEntrega, "0");
    }
    private void guardarEncargo(String nombre, String fechaEntrega, String idCliente) {
        int idEncargo=GestionEncargosBD.setEncargoNuevo(nombre, FechasUtils.fechaParaMysql(fechaEntrega), idCliente);
        for (int i=0;i<jTableComposicionNueva.getRowCount();i++){
            String idFlor= (String) jTableComposicionNueva.getValueAt(i, 0);
            int cantidad= (int) jTableComposicionNueva.getValueAt(i, 4);
            System.out.println(idEncargo+" - "+idFlor+" - "+cantidad);
            GestionEncargosBD.setEncargoNuevoFlores(idEncargo, Integer.parseInt(idFlor), cantidad);
            
        }
    }

    private void cargarListaEncargos() {
        vaciarTable(jTableFloresEncargo);
        ArrayList<EncargoBean> lista;
        String estado = jComboBox1.getModel().getElementAt(jComboBox1.getSelectedIndex());
        lista=GestionEncargosBD.getListaEncargos(estado);
        DefaultTableModel datosTabla = (DefaultTableModel) jTableEncargos.getModel();
        for (int i = datosTabla.getRowCount(); i > 0; i--) {
            datosTabla.removeRow(i - 1);
        }
        for (EncargoBean encargo : lista) {
            datosTabla.addRow(new Object[]{
                encargo.getIdEncargo(),
                encargo.getNombreComposicion(),
                encargo.getNombreCliente(),
                FechasUtils.fecha(encargo.getFechaEntrega())
            });
        }
        jLabelTotalEncargos.setText("Total encargos: " + lista.size());
    }

    private void cargarTablaFloresAlmacen() {
        ArrayList<FlorBean> lista;
        
        lista=GestionFloresBD.getListaFloresGeneral();
        DefaultTableModel datosTabla = (DefaultTableModel) jTableFloresAlmacen.getModel();
        for (int i = datosTabla.getRowCount(); i > 0; i--) {
            datosTabla.removeRow(i - 1);
        }
        for (FlorBean flor : lista) {
            datosTabla.addRow(new Object[]{
                flor.getIdFlor(),
                flor.getNombreFamilia(),
                flor.getNombre(),
                flor.getColor(),
                flor.getCantidadAlmacen(),
                flor.getCantidad(),
                (flor.getCantidadAlmacen()-flor.getCantidad())
            });
        }
        //jLabelTotalEncargos.setText("Total: " + lista.size());
    }

    private void vaciarTable(JTable jTabla) {
        DefaultTableModel datosTabla = (DefaultTableModel) jTabla.getModel();
        for (int i = datosTabla.getRowCount(); i > 0; i--) {
            datosTabla.removeRow(i - 1);
        }
        
    }

    private void botonesEstados() {
        String combo=jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
        if(listaBotonesEstado.size()==0){
            ArrayList<String> listaEstados=GestionEncargosBD.getListaEstados();
            System.out.println("Botones de estado");
            JButton boton;
            for(String nombreBoton: listaEstados){
                boton=new JButton(nombreBoton);
                boton.setPreferredSize(new Dimension(90, 80));
                if(nombreBoton.equalsIgnoreCase(combo)){
                    boton.setEnabled(false);
                }
                boton.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        cambiarEstado(nombreBoton);
                    }
                    
                });
                //A√±adimos el boton al panel y al arrayList para luego manejarlos.
                jPanelBotonesEstados.add(boton);
                listaBotonesEstado.add(boton);
            }
        }
    }
    private void cambiarEstado(String nuevoEstado){
        if(jTableEncargos.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un encargo","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("Cambiar estado: "+nuevoEstado);
        String id=(String) jTableEncargos.getValueAt(jTableEncargos.getSelectedRow(), 0);
        GestionEncargosBD.cambiarEstado(nuevoEstado, id);
        cargarListaEncargos();
        
    }
    private ArrayList<JButton> listaBotonesEstado=new ArrayList<JButton>();

    private void cambiarBotonEstados() {
        String estadoNuevo = jComboBox1.getModel().getElementAt(jComboBox1.getSelectedIndex());
        for(JButton boton:listaBotonesEstado){
            boton.setEnabled(!estadoNuevo.equalsIgnoreCase(boton.getText()));
//            if(estadoNuevo.equalsIgnoreCase(boton.getText())){
//                boton.setEnabled(false);
//            }else{
//                
//            }
        }
    }
}
